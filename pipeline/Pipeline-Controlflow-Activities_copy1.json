{
	"name": "Pipeline-Controlflow-Activities_copy1",
	"properties": {
		"activities": [
			{
				"name": "Get Child Items",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Set variable1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "orders",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Filter text files",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Get Child Items",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Child Items').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@endswith(item().name,'.txt')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "For Each File",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter text files",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter text files').output.Value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "If File Exists",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@contains(variables('existingfiles'),item().name)",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Copy file to orderstxt directory",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DelimitedTextSource",
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true
												},
												"formatSettings": {
													"type": "DelimitedTextReadSettings"
												}
											},
											"sink": {
												"type": "DelimitedTextSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "DelimitedTextWriteSettings",
													"quoteAllText": true,
													"fileExtension": ".txt"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "ordersfile",
												"type": "DatasetReference",
												"parameters": {
													"filename": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "orderstxt",
												"type": "DatasetReference"
											}
										]
									},
									{
										"name": "Log file copy to database",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Copy file to orderstxt directory",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[usp_UpdateCopyStatus]",
											"storedProcedureParameters": {
												"filename": {
													"value": {
														"value": "@item().name",
														"type": "Expression"
													},
													"type": "String"
												},
												"fromdirectory": {
													"value": "orders",
													"type": "String"
												},
												"todirectory": {
													"value": "orderstxt",
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "AzureSqlDatabaseLinkedService",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "GetExistingFiles",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[usp_GetFileNames]",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "copiedfilenames",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set variable1",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetExistingFiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "existingfiles",
					"value": {
						"value": "@activity('GetExistingFiles').output.value",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"test": {
				"type": "string",
				"defaultValue": "1"
			}
		},
		"variables": {
			"existingfiles": {
				"type": "Array"
			}
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}